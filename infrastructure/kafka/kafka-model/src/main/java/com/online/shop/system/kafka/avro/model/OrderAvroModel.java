/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.online.shop.system.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 74929438292006592L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderAvroModel\",\"namespace\":\"com.online.shop.system.kafka.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"userID\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderItem\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"product\",\"type\":{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"imageUrl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"subTotal\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}}]}}},{\"name\":\"totalPrice\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"purchasedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}},{\"name\":\"orderAddress\",\"type\":{\"type\":\"record\",\"name\":\"OrderAddress\",\"fields\":[{\"name\":\"street\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"postalCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"details\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderDetail\",\"fields\":[{\"name\":\"orderID\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"orderStatus\",\"type\":{\"type\":\"enum\",\"name\":\"OrderStatus\",\"symbols\":[\"PENDING\",\"PAID\",\"SHIPPED\",\"ARRIVED\",\"CONFIRMED\",\"FINISHED\",\"CANCELLED\"]}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<OrderAvroModel> ENCODER =
      new BinaryMessageEncoder<OrderAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderAvroModel> DECODER =
      new BinaryMessageDecoder<OrderAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String userID;
  private java.util.List<com.online.shop.system.kafka.avro.model.OrderItem> items;
  private java.math.BigDecimal totalPrice;
  private java.time.LocalDateTime purchasedAt;
  private com.online.shop.system.kafka.avro.model.OrderAddress orderAddress;
  private java.util.List<com.online.shop.system.kafka.avro.model.OrderDetail> details;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param userID The new value for userID
   * @param items The new value for items
   * @param totalPrice The new value for totalPrice
   * @param purchasedAt The new value for purchasedAt
   * @param orderAddress The new value for orderAddress
   * @param details The new value for details
   */
  public OrderAvroModel(java.lang.String id, java.lang.String userID, java.util.List<com.online.shop.system.kafka.avro.model.OrderItem> items, java.math.BigDecimal totalPrice, java.time.LocalDateTime purchasedAt, com.online.shop.system.kafka.avro.model.OrderAddress orderAddress, java.util.List<com.online.shop.system.kafka.avro.model.OrderDetail> details) {
    this.id = id;
    this.userID = userID;
    this.items = items;
    this.totalPrice = totalPrice;
    this.purchasedAt = purchasedAt;
    this.orderAddress = orderAddress;
    this.details = details;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return userID;
    case 2: return items;
    case 3: return totalPrice;
    case 4: return purchasedAt;
    case 5: return orderAddress;
    case 6: return details;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: userID = value$ != null ? value$.toString() : null; break;
    case 2: items = (java.util.List<com.online.shop.system.kafka.avro.model.OrderItem>)value$; break;
    case 3: totalPrice = (java.math.BigDecimal)value$; break;
    case 4: purchasedAt = (java.time.LocalDateTime)value$; break;
    case 5: orderAddress = (com.online.shop.system.kafka.avro.model.OrderAddress)value$; break;
    case 6: details = (java.util.List<com.online.shop.system.kafka.avro.model.OrderDetail>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'userID' field.
   * @return The value of the 'userID' field.
   */
  public java.lang.String getUserID() {
    return userID;
  }


  /**
   * Sets the value of the 'userID' field.
   * @param value the value to set.
   */
  public void setUserID(java.lang.String value) {
    this.userID = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return The value of the 'items' field.
   */
  public java.util.List<com.online.shop.system.kafka.avro.model.OrderItem> getItems() {
    return items;
  }


  /**
   * Sets the value of the 'items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<com.online.shop.system.kafka.avro.model.OrderItem> value) {
    this.items = value;
  }

  /**
   * Gets the value of the 'totalPrice' field.
   * @return The value of the 'totalPrice' field.
   */
  public java.math.BigDecimal getTotalPrice() {
    return totalPrice;
  }


  /**
   * Sets the value of the 'totalPrice' field.
   * @param value the value to set.
   */
  public void setTotalPrice(java.math.BigDecimal value) {
    this.totalPrice = value;
  }

  /**
   * Gets the value of the 'purchasedAt' field.
   * @return The value of the 'purchasedAt' field.
   */
  public java.time.LocalDateTime getPurchasedAt() {
    return purchasedAt;
  }


  /**
   * Sets the value of the 'purchasedAt' field.
   * @param value the value to set.
   */
  public void setPurchasedAt(java.time.LocalDateTime value) {
    this.purchasedAt = value;
  }

  /**
   * Gets the value of the 'orderAddress' field.
   * @return The value of the 'orderAddress' field.
   */
  public com.online.shop.system.kafka.avro.model.OrderAddress getOrderAddress() {
    return orderAddress;
  }


  /**
   * Sets the value of the 'orderAddress' field.
   * @param value the value to set.
   */
  public void setOrderAddress(com.online.shop.system.kafka.avro.model.OrderAddress value) {
    this.orderAddress = value;
  }

  /**
   * Gets the value of the 'details' field.
   * @return The value of the 'details' field.
   */
  public java.util.List<com.online.shop.system.kafka.avro.model.OrderDetail> getDetails() {
    return details;
  }


  /**
   * Sets the value of the 'details' field.
   * @param value the value to set.
   */
  public void setDetails(java.util.List<com.online.shop.system.kafka.avro.model.OrderDetail> value) {
    this.details = value;
  }

  /**
   * Creates a new OrderAvroModel RecordBuilder.
   * @return A new OrderAvroModel RecordBuilder
   */
  public static com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder newBuilder() {
    return new com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder();
  }

  /**
   * Creates a new OrderAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderAvroModel RecordBuilder
   */
  public static com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder newBuilder(com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder other) {
    if (other == null) {
      return new com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder();
    } else {
      return new com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new OrderAvroModel RecordBuilder by copying an existing OrderAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new OrderAvroModel RecordBuilder
   */
  public static com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder newBuilder(com.online.shop.system.kafka.avro.model.OrderAvroModel other) {
    if (other == null) {
      return new com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder();
    } else {
      return new com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderAvroModel>
    implements org.apache.avro.data.RecordBuilder<OrderAvroModel> {

    private java.lang.String id;
    private java.lang.String userID;
    private java.util.List<com.online.shop.system.kafka.avro.model.OrderItem> items;
    private java.math.BigDecimal totalPrice;
    private java.time.LocalDateTime purchasedAt;
    private com.online.shop.system.kafka.avro.model.OrderAddress orderAddress;
    private com.online.shop.system.kafka.avro.model.OrderAddress.Builder orderAddressBuilder;
    private java.util.List<com.online.shop.system.kafka.avro.model.OrderDetail> details;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userID)) {
        this.userID = data().deepCopy(fields()[1].schema(), other.userID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.items)) {
        this.items = data().deepCopy(fields()[2].schema(), other.items);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[3].schema(), other.totalPrice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.purchasedAt)) {
        this.purchasedAt = data().deepCopy(fields()[4].schema(), other.purchasedAt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.orderAddress)) {
        this.orderAddress = data().deepCopy(fields()[5].schema(), other.orderAddress);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasOrderAddressBuilder()) {
        this.orderAddressBuilder = com.online.shop.system.kafka.avro.model.OrderAddress.newBuilder(other.getOrderAddressBuilder());
      }
      if (isValidValue(fields()[6], other.details)) {
        this.details = data().deepCopy(fields()[6].schema(), other.details);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.online.shop.system.kafka.avro.model.OrderAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userID)) {
        this.userID = data().deepCopy(fields()[1].schema(), other.userID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.items)) {
        this.items = data().deepCopy(fields()[2].schema(), other.items);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[3].schema(), other.totalPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.purchasedAt)) {
        this.purchasedAt = data().deepCopy(fields()[4].schema(), other.purchasedAt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.orderAddress)) {
        this.orderAddress = data().deepCopy(fields()[5].schema(), other.orderAddress);
        fieldSetFlags()[5] = true;
      }
      this.orderAddressBuilder = null;
      if (isValidValue(fields()[6], other.details)) {
        this.details = data().deepCopy(fields()[6].schema(), other.details);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userID' field.
      * @return The value.
      */
    public java.lang.String getUserID() {
      return userID;
    }


    /**
      * Sets the value of the 'userID' field.
      * @param value The value of 'userID'.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder setUserID(java.lang.String value) {
      validate(fields()[1], value);
      this.userID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userID' field has been set.
      * @return True if the 'userID' field has been set, false otherwise.
      */
    public boolean hasUserID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userID' field.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder clearUserID() {
      userID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * @return The value.
      */
    public java.util.List<com.online.shop.system.kafka.avro.model.OrderItem> getItems() {
      return items;
    }


    /**
      * Sets the value of the 'items' field.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder setItems(java.util.List<com.online.shop.system.kafka.avro.model.OrderItem> value) {
      validate(fields()[2], value);
      this.items = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'items' field.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder clearItems() {
      items = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPrice' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalPrice() {
      return totalPrice;
    }


    /**
      * Sets the value of the 'totalPrice' field.
      * @param value The value of 'totalPrice'.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder setTotalPrice(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.totalPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPrice' field has been set.
      * @return True if the 'totalPrice' field has been set, false otherwise.
      */
    public boolean hasTotalPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalPrice' field.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder clearTotalPrice() {
      totalPrice = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchasedAt' field.
      * @return The value.
      */
    public java.time.LocalDateTime getPurchasedAt() {
      return purchasedAt;
    }


    /**
      * Sets the value of the 'purchasedAt' field.
      * @param value The value of 'purchasedAt'.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder setPurchasedAt(java.time.LocalDateTime value) {
      validate(fields()[4], value);
      this.purchasedAt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'purchasedAt' field has been set.
      * @return True if the 'purchasedAt' field has been set, false otherwise.
      */
    public boolean hasPurchasedAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'purchasedAt' field.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder clearPurchasedAt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderAddress' field.
      * @return The value.
      */
    public com.online.shop.system.kafka.avro.model.OrderAddress getOrderAddress() {
      return orderAddress;
    }


    /**
      * Sets the value of the 'orderAddress' field.
      * @param value The value of 'orderAddress'.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder setOrderAddress(com.online.shop.system.kafka.avro.model.OrderAddress value) {
      validate(fields()[5], value);
      this.orderAddressBuilder = null;
      this.orderAddress = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'orderAddress' field has been set.
      * @return True if the 'orderAddress' field has been set, false otherwise.
      */
    public boolean hasOrderAddress() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'orderAddress' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.online.shop.system.kafka.avro.model.OrderAddress.Builder getOrderAddressBuilder() {
      if (orderAddressBuilder == null) {
        if (hasOrderAddress()) {
          setOrderAddressBuilder(com.online.shop.system.kafka.avro.model.OrderAddress.newBuilder(orderAddress));
        } else {
          setOrderAddressBuilder(com.online.shop.system.kafka.avro.model.OrderAddress.newBuilder());
        }
      }
      return orderAddressBuilder;
    }

    /**
     * Sets the Builder instance for the 'orderAddress' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder setOrderAddressBuilder(com.online.shop.system.kafka.avro.model.OrderAddress.Builder value) {
      clearOrderAddress();
      orderAddressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'orderAddress' field has an active Builder instance
     * @return True if the 'orderAddress' field has an active Builder instance
     */
    public boolean hasOrderAddressBuilder() {
      return orderAddressBuilder != null;
    }

    /**
      * Clears the value of the 'orderAddress' field.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder clearOrderAddress() {
      orderAddress = null;
      orderAddressBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'details' field.
      * @return The value.
      */
    public java.util.List<com.online.shop.system.kafka.avro.model.OrderDetail> getDetails() {
      return details;
    }


    /**
      * Sets the value of the 'details' field.
      * @param value The value of 'details'.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder setDetails(java.util.List<com.online.shop.system.kafka.avro.model.OrderDetail> value) {
      validate(fields()[6], value);
      this.details = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'details' field has been set.
      * @return True if the 'details' field has been set, false otherwise.
      */
    public boolean hasDetails() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'details' field.
      * @return This builder.
      */
    public com.online.shop.system.kafka.avro.model.OrderAvroModel.Builder clearDetails() {
      details = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderAvroModel build() {
      try {
        OrderAvroModel record = new OrderAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.userID = fieldSetFlags()[1] ? this.userID : (java.lang.String) defaultValue(fields()[1]);
        record.items = fieldSetFlags()[2] ? this.items : (java.util.List<com.online.shop.system.kafka.avro.model.OrderItem>) defaultValue(fields()[2]);
        record.totalPrice = fieldSetFlags()[3] ? this.totalPrice : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.purchasedAt = fieldSetFlags()[4] ? this.purchasedAt : (java.time.LocalDateTime) defaultValue(fields()[4]);
        if (orderAddressBuilder != null) {
          try {
            record.orderAddress = this.orderAddressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("orderAddress"));
            throw e;
          }
        } else {
          record.orderAddress = fieldSetFlags()[5] ? this.orderAddress : (com.online.shop.system.kafka.avro.model.OrderAddress) defaultValue(fields()[5]);
        }
        record.details = fieldSetFlags()[6] ? this.details : (java.util.List<com.online.shop.system.kafka.avro.model.OrderDetail>) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<OrderAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










